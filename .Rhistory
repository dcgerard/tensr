)
cat("Esttimates of scale:\n",
"From X:", mle_X$sig_mle,"\n",
"From Y:", mle_Y$sig_mle,"\n",
"From Z:", mle_Z$sig_mle,"\n"
)
diag(cov_Z[[1]])
diag(mle_Z[[1]][[1]])
cat("True:", paste("(",paste(diag(cov_Z[[1]]),collapse = ","),")",sep = ""),"\n",
"Estimate:", paste("(",paste(diag(mle_Z[[1]][[1]]),collapse = ","),")",sep = ""),"\n")
cat("True:", paste("(", paste(round(diag(cov_Z[[1]]), digits = 2), collapse = ","), ")",sep = ""), "\n",
"Estimate:", paste("(", paste(round(diag(mle_Z[[1]][[1]]), digits = 2), collapse = ","), ")", sep = ""), "\n")
cat("    True:", paste("(", paste(round(diag(cov_Z[[1]]), digits = 2), collapse = ","), ")",sep = ""), "\n",
"Estimate:", paste("(", paste(round(diag(mle_Z[[1]][[1]]), digits = 2), collapse = ","), ")", sep = ""), "\n")
cat("     True:", paste("(", paste(round(diag(cov_Z[[1]]), digits = 2), collapse = ","), ")",sep = ""), "\n",
"Estimate:", paste("(", paste(round(diag(mle_Z[[1]][[1]]), digits = 2), collapse = ","), ")", sep = ""), "\n")
cat("     True:", paste("(", paste(round(diag(cov_Z[[1]]), digits = 2), collapse = ", "), ")",sep = ""), "\n",
"Estimate:", paste("(", paste(round(diag(mle_Z[[1]][[1]]), digits = 2), collapse = ","), ")", sep = ""), "\n")
cat("     True:", paste("(", paste(round(diag(cov_Z[[1]]), digits = 2), collapse = ", "), ")",sep = ""), "\n",
"Estimate:", paste("(", paste(round(diag(mle_Z[[1]][[1]]), digits = 2), collapse = ", "), ")", sep = ""), "\n")
cat("     True:", paste("(", paste(format(diag(cov_Z[[1]]), digits = 2), collapse = ", "), ")",sep = ""), "\n",
"Estimate:", paste("(", paste(format(diag(mle_Z[[1]][[1]]), digits = 2), collapse = ", "), ")", sep = ""), "\n")
null_distribution <- lrt_null_dist_dim_same(p = p,null_ident = 1:4,alt_ident = 1:3)
null_distribution <- lrt_null_dist_dim_same(p = p,null_ident = 1:4,alt_ident = 1:3)
sig_k <- holq(X,mode_rep = 1:3, print_diff = FALSE)$sig
sig_h <- holq(X,mode_rep = 1:4, print_diff = FALSE)$sig
lrt_stat_val_X <- lrt_stat(sig_null = sig_h,sig_alt = sig_k,p = p)
sig_k <- holq(Y,mode_rep = 1:3, print_diff = FALSE)$sig
sig_h <- holq(Y,mode_rep = 1:4, print_diff = FALSE)$sig
lrt_stat_val_Y <- lrt_stat(sig_null = sig_h,sig_alt = sig_k,p = p)
p_value_x <- mean(null_distribution > lrt_stat_val_X)
p_value_y <- mean(null_distribution > lrt_stat_val_Y)
p_value_x
p_valu_y
p_value_y
null_distribution <- lrt_null_dist_dim_same(p = p,null_ident = 1:4,alt_ident = 1:3, itermax = 1000)
sig_k <- holq(X,mode_rep = 1:3, print_diff = FALSE)$sig
sig_h <- holq(X,mode_rep = 1:4, print_diff = FALSE)$sig
lrt_stat_val_X <- lrt_stat(sig_null = sig_h,sig_alt = sig_k,p = p)
sig_k <- holq(Y,mode_rep = 1:3, print_diff = FALSE)$sig
sig_h <- holq(Y,mode_rep = 1:4, print_diff = FALSE)$sig
lrt_stat_val_Y <- lrt_stat(sig_null = sig_h,sig_alt = sig_k,p = p)
p_value_x <- mean(null_distribution > lrt_stat_val_X)
p_value_y <- mean(null_distribution > lrt_stat_val_Y)
p_value_x
p_value_y
cat("p-value using X:", p_value_x,"\n",
"p-value using Y:", p_vlaue_y,"\n")
p_value_y <- mean(null_distribution > lrt_stat_val_Y)
cat("p-value using X:", p_value_x,"\n",
"p-value using Y:", p_value_y,"\n")
cat(" p-value using X:", p_value_x,"\n",
"p-value using Y:", p_value_y,"\n")
hist(null_distribution,xlab = "LRT Stat",main = "Null Distribution")
abline(v = lrt_stat_val_x,col = 2,lwd = 2,lty = 2)
abline(v = lrt_stat_val_y,col = 4,lwd = 2,lty = 2)
hist(null_distribution,xlab = "LRT Stat",main = "Null Distribution")
abline(v = lrt_stat_val_X,col = 2,lwd = 2,lty = 2)
abline(v = lrt_stat_val_Y,col = 4,lwd = 2,lty = 2)
abline(v = lrt_stat_val_Y,col = 4,lwd = 2,lty = 2)
lrt_stat_val_Y
legend("topright", c("From X","From Y"), col = c(2,4), lty = 2, lwd = 2)
null_distribution <- lrt_null_dist_dim_same(p = p,null_ident = 4,alt_ident = 4, null_diag = 1, alt_diag = c(1,2), itermax = 500)
sig_k <- holq(Z,mode_rep = 4, mode_diag = c(1,2), print_diff = FALSE)$sig
sig_h <- holq(Z,mode_rep = c(2,4), mode_diag = 1, print_diff = FALSE)$sig
lrt_stat_val_Z <- lrt_stat(sig_null = sig_h,sig_alt = sig_k,p = p)
p_value_z <- mean(null_distribution > lrt_stat_val_Z)
cat(" p-value using X:", p_value_x,"\n",
"p-value using Y:", p_value_y,"\n")
cat(" p-value:", p_value_x,"\n")
par(mar = c(2.5,2.5,2,0), mgp = c(1.5,.5,0))
hist(null_distribution,xlab = "LRT Stat",main = "Null Distribution")
abline(v = lrt_stat_val_Z,col = 2,lwd = 2,lty = 2)
legend("topright", c("From X","From Y"), col = c(2,4), lty = 2, lwd = 2, cex = 0.6)
legend("topright", "True LRT", col = 2, lty = 2, lwd = 2, cex = 0.6)
par(mar = c(2.5,2.5,2,0), mgp = c(1.5,.5,0))
hist(null_distribution,xlab = "LRT Stat",main = "Null Distribution")
abline(v = lrt_stat_val_Z,col = 2,lwd = 2,lty = 2)
legend("topright", "True LRT", col = 2, lty = 2, lwd = 2, cex = 0.6)
cat(" p-value:", p_value_x,"\n")
cat(" p-value:", p_value_z,"\n")
devtools::build_vignettes()
devtools::build(binary = TRUE)
devtools::document()
devtools::install()
library(tensor)
browseVignettes()
package?tensr
?tensr
package?tensr
?tensr
package?tensr
?tensr
package?tensr
?tensr
X <- c(0, 1, 10^-7, -1, -10^-7)
X
trim(X)
devtools::build(binary = TRUE)
devtools::build()
devtools::install()
library(tensr)
browseVignettes()
?"tensr"
lq
library(tensr)
?tensr
browseVignettes()
?equi_mcmc
library(tensr)
?equi_mcmc
library(tensr)
?tensr
?tensr
library(tensr)
?tensr
?equi_mcmc
?tensr
mle_from_holq
?holq
?isvd
?get_isvd
library(devtools)
document()
?zscores
document()
?hooi
lintr::lint()
lintr::lint_package()
lintr::lint_package()
lintr::lint_package()
lintr::lint_package()
lintr::lint_package()
document()
document()
?Kom
check()
?anorm_cd
m<-c(6,5,4)
K<-length(m)
M<-rsan(m)
S<-list() ; for(k in 1:K) { S[[k]]<-rwish(diag(m[k]))/m[k] }
Y<-M+atrans(rsan(m),lapply(S,mhalf))
SY<-Y*0
SS<-list() ; for(k in 1:K) { SS[[k]]<-matrix(0,m[k],m[k]) }
for(s in 1:1e4)
{
saidx<-list()
for(k in 1:K){ saidx[[k]]<-sort(sample(1:m[k],1+rbinom(1,m[k]-1,.5))) }
MS<-anorm_cd(Y,M,S,saidx)
Ya<- MS$Mab + atrans(rsan(sapply(saidx,length)),lapply(MS$Sab,mhalf))
Y[arrIndices(saidx)]<-Ya
SY<-SY+Y
for(k in 1:K){SS[[k]]<-SS[[k]]+mat(Y-M,k)%*%t(mat(Y-M,k)) }
}
par(mfrow=c(2,2))
plot(M,SY/s)  ; abline(0,1)
for (k in 1:K) {plot(S[[k]]/tr(S[[k]]),SS[[k]]/tr(SS[[k]])) ; abline(0,1) }
SY<-Y*0
SS<-list() ; for(k in 1:K) { SS[[k]]<-matrix(0,m[k],m[k]) }
for(s in 1:1e4)
{
saidx<-list()
for(k in 1:K){ saidx[[k]]<-sort(sample(1:m[k],1+rbinom(1,m[k]-1,.5))) }
MS<-anorm_cd(Y,M,S,saidx)
Ya<- MS$Mab + atrans(rsan(sapply(saidx,length)),lapply(MS$Sab,mhalf))
Y[arrIndices(saidx)]<-Ya
SY<-SY+Y
for(k in 1:K){SS[[k]]<-SS[[k]]+mat(Y-M,k)%*%t(mat(Y-M,k)) }
}
par(mfrow=c(2,2))
plot(M,SY/s)  ; abline(0,1)
for (k in 1:K) {plot(S[[k]]/tr(S[[k]]),SS[[k]]/tr(SS[[k]])) ; abline(0,1) }
SY<-Y*0
SS<-list() ; for(k in 1:K) { SS[[k]]<-matrix(0,m[k],m[k]) }
for(s in 1:1e4)
{
saidx<-list()
for(k in 1:K){ saidx[[k]]<-sort(sample(1:m[k],1+rbinom(1,m[k]-1,.5))) }
MS<-anorm_cd(Y,M,S,saidx)
Ya<- MS$Mab + atrans(rsan(sapply(saidx,length)),lapply(MS$Sab,mhalf))
Y[arrIndices(saidx)]<-Ya
SY<-SY+Y
for(k in 1:K){SS[[k]]<-SS[[k]]+mat(Y-M,k)%*%t(mat(Y-M,k)) }
}
s
saidx<-list()
for(k in 1:K){ saidx[[k]]<-sort(sample(1:m[k],1+rbinom(1,m[k]-1,.5))) }
MS<-anorm_cd(Y,M,S,saidx)
Ya<- MS$Mab + atrans(rsan(sapply(saidx,length)),lapply(MS$Sab,mhalf))
Y[arrIndices(saidx)]<-Ya
SY<-SY+Y
for(k in 1:K){SS[[k]]<-SS[[k]]+mat(Y-M,k)%*%t(mat(Y-M,k)) }
saidx<-list()
for(k in 1:K){ saidx[[k]]<-sort(sample(1:m[k],1+rbinom(1,m[k]-1,.5))) }
MS<-anorm_cd(Y,M,S,saidx)
Ya<- MS$Mab + atrans(rsan(sapply(saidx,length)),lapply(MS$Sab,mhalf))
Y[arrIndices(saidx)]<-Ya
SY<-SY+Y
for(k in 1:K){SS[[k]]<-SS[[k]]+mat(Y-M,k)%*%t(mat(Y-M,k)) }
saidx<-list()
for(k in 1:K){ saidx[[k]]<-sort(sample(1:m[k],1+rbinom(1,m[k]-1,.5))) }
MS<-anorm_cd(Y,M,S,saidx)
Ya<- MS$Mab + atrans(rsan(sapply(saidx,length)),lapply(MS$Sab,mhalf))
Y[arrIndices(saidx)]<-Ya
SY<-SY+Y
for(k in 1:K){SS[[k]]<-SS[[k]]+mat(Y-M,k)%*%t(mat(Y-M,k)) }
s
SY
dim(SY)
dim(Ya)
saidx<-list()
for(k in 1:K){ saidx[[k]]<-sort(sample(1:m[k],1+rbinom(1,m[k]-1,.5))) }
MS<-anorm_cd(Y,M,S,saidx)
Ya<- MS$Mab + atrans(rsan(sapply(saidx,length)),lapply(MS$Sab,mhalf))
Y[arrIndices(saidx)]<-Ya
SY<-SY+Y
for(k in 1:K){SS[[k]]<-SS[[k]]+mat(Y-M,k)%*%t(mat(Y-M,k)) }
S
saidx
SY<-Y*0
SS<-list() ; for(k in 1:K) { SS[[k]]<-matrix(0,m[k],m[k]) }
for(s in 1:1e4)
{
saidx<-list()
for(k in 1:K){ saidx[[k]]<-sort(sample(1:m[k],1+rbinom(1,m[k]-1,.5))) }
MS<-anorm_cd(Y,M,S,saidx)
Ya<- MS$Mab + atrans(rsan(sapply(saidx,length)),lapply(MS$Sab,mhalf))
Y[arrIndices(saidx)]<-Ya
SY<-SY+Y
for(k in 1:K){SS[[k]]<-SS[[k]]+mat(Y-M,k)%*%t(mat(Y-M,k)) }
}
check()
document()
check()
document()
document()
install()
document()
document()
install()
library(tensr)
?array_cd
?anorm_cd
m<-c(6,5,4)
K<-length(m)
M<-rsan(m)
S<-list() ; for(k in 1:K) { S[[k]]<-rwish(diag(m[k]))/m[k] }
Y<-M+atrans(rsan(m),lapply(S,mhalf))
SY<-Y*0
SS<-list() ; for(k in 1:K) { SS[[k]]<-matrix(0,m[k],m[k]) }
for(s in 1:1e4)
{
saidx<-list()
for(k in 1:K){ saidx[[k]]<-sort(sample(1:m[k],1+rbinom(1,m[k]-1,.5))) }
MS<-anorm_cd(Y,M,S,saidx)
Ya<- MS$Mab + atrans(rsan(sapply(saidx,length)),lapply(MS$Sab,mhalf))
Y[arrIndices(saidx)]<-Ya
SY<-SY+Y
for(k in 1:K){SS[[k]]<-SS[[k]]+mat(Y-M,k)%*%t(mat(Y-M,k)) }
}
par(mfrow=c(2,2))
plot(M,SY/s)  ; abline(0,1)
for (k in 1:K) {plot(S[[k]]/tr(S[[k]]),SS[[k]]/tr(SS[[k]])) ; abline(0,1) }
?multiway_takemura
?multiway_takemura
library(tensr)
install()
?multiway_takemura
document()
library(tensr)
?multiway_takemura
library(devtools)
document()
document()
?equi_mcmc
devtools::load_all(".")
?multiway_takemura
devtools::document()
?multiway_takemura
devtools::document()
?multiway_takemura
# Simulate data.
p <- c(5, 5, 5)
X <- array(rnorm(prod(p)), dim = p)
multi_out <- multiway_takemura(X, mode_rep = 3)
multi_out$b
multi_out$B[[1]]
multi_out$B[[2]]
multi_out$B[[3]]
devtools::document()
?multiway_takemura
# Simulate data.
p <- c(5, 5, 5)
X <- array(rnorm(prod(p)), dim = p)
multi_out <- multiway_takemura(X, mode_rep = 3)
multi_out$b
trim(multi_out$B[[1]])
trim(multi_out$B[[2]])
trim(multi_out$B[[3]])
det(multi_out$B[[1]])
devtools::document()
?multiway_takemura
installed.packages()
install()
devtools::install()
library(tensr)
check()
devtools::check()
?kronecker
devtools::document()
devtools::document()
devtools::install()
devtools::check()
install.packages("bibtex")
install.packages("roclet")
library(devtools)
document()
?convert_cov
document()
?lrt_stat
document()
?hooi
document()
?hooi
document()
install
install()
library(tensr)
?tensr
?demean_tensor
?holq
library(tensr)
?anorm_cd
devtools::document()
devtools::install()
library(tensr)
?anorm_cd
?anorm_cd
?anorm_cd
library(tensr)
?anorm_cd
m<-c(6,5,4)
K<-length(m)
M<-rsan(m)
S<-list() ; for(k in 1:K) { S[[k]]<-rwish(diag(m[k]))/m[k] }
Y<-M+atrans(rsan(m),lapply(S,mhalf))
SY<-Y*0
SS<-list() ; for(k in 1:K) { SS[[k]]<-matrix(0,m[k],m[k]) }
s <- 1
saidx<-list()
for(k in 1:K){ saidx[[k]]<-sort(sample(1:m[k],1+rbinom(1,m[k]-1,.5))) }
saidx
MS<-anorm_cd(Y,M,S,saidx)
ms
MS
saidx
MS
dim(Y)
devtools::document()
package?tensr
devtools::install()
library(tensr)
package?tensr
devtools::build()
devtools::build()
packages?tensr
package?tensr
devtools::document()
package?tensr
?tensr
devtools::build()
?tensr
package?tensr
library(tensr)
package?tensr
devtools::install()
package?tensr
?tsum
?tr
library(tensr)
?tsum
?tensr
?holq
library(tensr)
?hol
?holq
?tensr
package?tensr
demean_tensor
demean_tenser
library(tensr)
?demean_tensor
demean_tensor
tensr::demean_tensor
tensr:::demean_tensor
devtools::document()
devtools::install()
?demean_tensor
demean_tensor()
demean_tensor
devtools::build()
devtools::check_cran()
devtools::check_cran(tensr)
devtools::check_cran('tensr')
devtools::check()
?ldan
?anorm_cd
devtools::build()
devtools::document()
devtools::load_all()
?anorm_cd
devtools::load_all()
devtools::document()
devtools::load_all()
?anorm_cd
?tensr
devtools::install()
?tensr
devtools::document()
devtools::install()
?tensr
package?tensr
library(tensr)
?tensr
p <- c(4, 4, 4)
Y <- array(rnorm(prod(p)))
Y
Y <- array(rnorm(prod(p)), dim = p)
Y
Y <- amprod(Z, diag(1:p[1]), 1)
Z <- array(rnorm(prod(p)), dim = p)
Y <- amprod(Z, diag(1:p[1]), 1)
Y
?holq
false_fit <- holq(Y, mode_rep = 1:length(p))
true_fit <- holq(Y, mode_rep = 2:length(p), mode_diag = 1)
names(false_fit)
array_bic_aic(false_fit$sig ^ 2, p, mode_ident = 1:length(p))
array_bic_aic(true_fit$sig ^ 2, p, mode_ident = 2:length(p), mode_diag = 1)
set.seed(857)
p <- c(4, 4, 4)
Z <- array(rnorm(prod(p)), dim = p)
Y <- amprod(Z, diag(1:p[1]), 1)
false_fit1 <- holq(Y, mode_rep = 1:length(p)) ## identity for all modes
false_fit2 <- holq(Y, mode_rep = 2:length(p)) ## unstructured first mode
true_fit <- holq(Y, mode_rep = 2:length(p), mode_diag = 1) ## correct model
array_bic_aic(false_fit1$sig ^ 2, p, mode_ident = 1:length(p))
array_bic_aic(false_fit2$sig ^ 2, p, mode_ident = 2:length(p), mode_unstructurred = 1)
array_bic_aic(false_fit2$sig ^ 2, p, mode_ident = 2:length(p), mode_unstructured = 1)
array_bic_aic(true_fit$sig ^ 2, p, mode_ident = 2:length(p), mode_diag = 1)
set.seed(857)
p <- c(4, 4, 4)
Z <- array(rnorm(prod(p)), dim = p)
Y <- amprod(Z, diag(1:p[1]), 1)
false_fit1 <- holq(Y, mode_rep = 1:length(p)) ## identity for all modes
false_fit2 <- holq(Y, mode_rep = 2:length(p)) ## unstructured first mode
true_fit <- holq(Y, mode_rep = 2:length(p), mode_diag = 1) ## correct model
false_aic1 <- array_bic_aic(false_fit1$sig ^ 2, p, mode_ident = 1:length(p))
false_aic2 <- array_bic_aic(false_fit2$sig ^ 2, p, mode_ident = 2:length(p), mode_unstructured = 1)
true_aic <- array_bic_aic(true_fit$sig ^ 2, p, mode_ident = 2:length(p), mode_diag = 1)
tensr:::rwish
set.seed(857)
p <- c(4, 4, 4)
Z <- array(rnorm(prod(p)), dim = p)
Y <- atrans(Z, list(tensr:::rwish(diag(p[1])), diag(1:p[2]), diag(p[3]))
)
false_fit1 <- holq(Y, mode_rep = 1:3 ## identity for all modes
false_fit2 <- holq(Y, mode_rep = 2:3 ## unstructured first mode
true_fit <- holq(Y, mode_rep = 3, mode_diag = 2) ## correct model
set.seed(857)
p <- c(4, 4, 4)
Z <- array(rnorm(prod(p)), dim = p)
Y <- atrans(Z, list(tensr:::rwish(diag(p[1])), diag(1:p[2]), diag(p[3])))
false_fit1 <- holq(Y, mode_rep = 1:3 ## identity for all modes
false_fit2 <- holq(Y, mode_rep = 2:3) ## unstructured first mode
set.seed(857)
p <- c(4, 4, 4)
Z <- array(rnorm(prod(p)), dim = p)
Y <- atrans(Z, list(tensr:::rwish(diag(p[1])), diag(1:p[2]), diag(p[3])))
false_fit1 <- holq(Y, mode_rep = 1:3) ## identity for all modes
false_fit2 <- holq(Y, mode_rep = 2:3) ## unstructured first mode
true_fit <- holq(Y, mode_rep = 3, mode_diag = 2) ## correct model
false_aic1 <- array_bic_aic(false_fit1$sig ^ 2, p, mode_ident = 1:length(p))
false_aic2 <- array_bic_aic(false_fit2$sig ^ 2, p, mode_ident = 2:length(p), mode_unstructured = 1)
true_aic <- array_bic_aic(true_fit$sig ^ 2, p, mode_ident = 2:length(p), mode_diag = 1)
false_aic1$AIC
c(false_aic1$AIC, false_aic2$AIC, true_aic$AIC)
?plot.default
plot(c(false_aic1$AIC, false_aic2$AIC, true_aic$AIC), type = "l", xaxt = "n")
plot(c(false_aic1$AIC, false_aic2$AIC, true_aic$AIC), type = "l", xaxt = "n", xlab = "Model", ylab = "AIC", main = "AIC")
?axis
axis(side = 1, at = 1:3, labels = c("Wrong Model 1", "Wrong Model 2", "Right Model"))
plot(c(false_aic1$BIC, false_aic2$BIC, true_aic$BIC), type = "l", xaxt = "n", xlab = "Model", ylab = "BIC", main = "BIC")
axis(side = 1, at = 1:3, labels = c("Wrong Model 1", "Wrong Model 2", "Right Model"))
plot(c(false_aic1$AIC, false_aic2$AIC, true_aic$AIC), type = "l", xaxt = "n", xlab = "Model", ylab = "AIC", main = "AIC")
axis(side = 1, at = 1:3, labels = c("Wrong Model 1", "Wrong Model 2", "Right Model"))
plot(c(false_aic1$BIC, false_aic2$BIC, true_aic$BIC), type = "l", xaxt = "n", xlab = "Model", ylab = "BIC", main = "BIC")
axis(side = 1, at = 1:3, labels = c("Wrong Model 1", "Wrong Model 2", "Right Model"))
plot(c(false_aic1$AIC, false_aic2$AIC, true_aic$AIC), type = "l", xaxt = "n", xlab = "Model", ylab = "AIC", main = "AIC")
axis(side = 1, at = 1:3, labels = c("Wrong Model 1", "Wrong Model 2", "Right Model"))
plot(c(false_aic1$BIC, false_aic2$BIC, true_aic$BIC), type = "l", xaxt = "n", xlab = "Model", ylab = "BIC", main = "BIC")
axis(side = 1, at = 1:3, labels = c("Wrong Model 1", "Wrong Model 2", "Right Model"))
devtools::document()
devtools::install()
?tensr
?tensr
library(tensr)
?tensr
devtools::document()
devtools::install()
devtools::build()

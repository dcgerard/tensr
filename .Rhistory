plot(M,SY/s)  ; abline(0,1)
for (k in 1:K) {plot(S[[k]]/tr(S[[k]]),SS[[k]]/tr(SS[[k]])) ; abline(0,1) }
SY<-Y*0
SS<-list() ; for(k in 1:K) { SS[[k]]<-matrix(0,m[k],m[k]) }
for(s in 1:1e4)
{
saidx<-list()
for(k in 1:K){ saidx[[k]]<-sort(sample(1:m[k],1+rbinom(1,m[k]-1,.5))) }
MS<-anorm_cd(Y,M,S,saidx)
Ya<- MS$Mab + atrans(rsan(sapply(saidx,length)),lapply(MS$Sab,mhalf))
Y[arrIndices(saidx)]<-Ya
SY<-SY+Y
for(k in 1:K){SS[[k]]<-SS[[k]]+mat(Y-M,k)%*%t(mat(Y-M,k)) }
}
par(mfrow=c(2,2))
plot(M,SY/s)  ; abline(0,1)
for (k in 1:K) {plot(S[[k]]/tr(S[[k]]),SS[[k]]/tr(SS[[k]])) ; abline(0,1) }
SY<-Y*0
SS<-list() ; for(k in 1:K) { SS[[k]]<-matrix(0,m[k],m[k]) }
for(s in 1:1e4)
{
saidx<-list()
for(k in 1:K){ saidx[[k]]<-sort(sample(1:m[k],1+rbinom(1,m[k]-1,.5))) }
MS<-anorm_cd(Y,M,S,saidx)
Ya<- MS$Mab + atrans(rsan(sapply(saidx,length)),lapply(MS$Sab,mhalf))
Y[arrIndices(saidx)]<-Ya
SY<-SY+Y
for(k in 1:K){SS[[k]]<-SS[[k]]+mat(Y-M,k)%*%t(mat(Y-M,k)) }
}
s
saidx<-list()
for(k in 1:K){ saidx[[k]]<-sort(sample(1:m[k],1+rbinom(1,m[k]-1,.5))) }
MS<-anorm_cd(Y,M,S,saidx)
Ya<- MS$Mab + atrans(rsan(sapply(saidx,length)),lapply(MS$Sab,mhalf))
Y[arrIndices(saidx)]<-Ya
SY<-SY+Y
for(k in 1:K){SS[[k]]<-SS[[k]]+mat(Y-M,k)%*%t(mat(Y-M,k)) }
saidx<-list()
for(k in 1:K){ saidx[[k]]<-sort(sample(1:m[k],1+rbinom(1,m[k]-1,.5))) }
MS<-anorm_cd(Y,M,S,saidx)
Ya<- MS$Mab + atrans(rsan(sapply(saidx,length)),lapply(MS$Sab,mhalf))
Y[arrIndices(saidx)]<-Ya
SY<-SY+Y
for(k in 1:K){SS[[k]]<-SS[[k]]+mat(Y-M,k)%*%t(mat(Y-M,k)) }
saidx<-list()
for(k in 1:K){ saidx[[k]]<-sort(sample(1:m[k],1+rbinom(1,m[k]-1,.5))) }
MS<-anorm_cd(Y,M,S,saidx)
Ya<- MS$Mab + atrans(rsan(sapply(saidx,length)),lapply(MS$Sab,mhalf))
Y[arrIndices(saidx)]<-Ya
SY<-SY+Y
for(k in 1:K){SS[[k]]<-SS[[k]]+mat(Y-M,k)%*%t(mat(Y-M,k)) }
s
SY
dim(SY)
dim(Ya)
saidx<-list()
for(k in 1:K){ saidx[[k]]<-sort(sample(1:m[k],1+rbinom(1,m[k]-1,.5))) }
MS<-anorm_cd(Y,M,S,saidx)
Ya<- MS$Mab + atrans(rsan(sapply(saidx,length)),lapply(MS$Sab,mhalf))
Y[arrIndices(saidx)]<-Ya
SY<-SY+Y
for(k in 1:K){SS[[k]]<-SS[[k]]+mat(Y-M,k)%*%t(mat(Y-M,k)) }
S
saidx
SY<-Y*0
SS<-list() ; for(k in 1:K) { SS[[k]]<-matrix(0,m[k],m[k]) }
for(s in 1:1e4)
{
saidx<-list()
for(k in 1:K){ saidx[[k]]<-sort(sample(1:m[k],1+rbinom(1,m[k]-1,.5))) }
MS<-anorm_cd(Y,M,S,saidx)
Ya<- MS$Mab + atrans(rsan(sapply(saidx,length)),lapply(MS$Sab,mhalf))
Y[arrIndices(saidx)]<-Ya
SY<-SY+Y
for(k in 1:K){SS[[k]]<-SS[[k]]+mat(Y-M,k)%*%t(mat(Y-M,k)) }
}
check()
document()
check()
document()
document()
install()
document()
document()
install()
library(tensr)
?array_cd
?anorm_cd
m<-c(6,5,4)
K<-length(m)
M<-rsan(m)
S<-list() ; for(k in 1:K) { S[[k]]<-rwish(diag(m[k]))/m[k] }
Y<-M+atrans(rsan(m),lapply(S,mhalf))
SY<-Y*0
SS<-list() ; for(k in 1:K) { SS[[k]]<-matrix(0,m[k],m[k]) }
for(s in 1:1e4)
{
saidx<-list()
for(k in 1:K){ saidx[[k]]<-sort(sample(1:m[k],1+rbinom(1,m[k]-1,.5))) }
MS<-anorm_cd(Y,M,S,saidx)
Ya<- MS$Mab + atrans(rsan(sapply(saidx,length)),lapply(MS$Sab,mhalf))
Y[arrIndices(saidx)]<-Ya
SY<-SY+Y
for(k in 1:K){SS[[k]]<-SS[[k]]+mat(Y-M,k)%*%t(mat(Y-M,k)) }
}
par(mfrow=c(2,2))
plot(M,SY/s)  ; abline(0,1)
for (k in 1:K) {plot(S[[k]]/tr(S[[k]]),SS[[k]]/tr(SS[[k]])) ; abline(0,1) }
?multiway_takemura
?multiway_takemura
library(tensr)
install()
?multiway_takemura
document()
library(tensr)
?multiway_takemura
library(devtools)
document()
document()
?equi_mcmc
devtools::load_all(".")
?multiway_takemura
devtools::document()
?multiway_takemura
devtools::document()
?multiway_takemura
# Simulate data.
p <- c(5, 5, 5)
X <- array(rnorm(prod(p)), dim = p)
multi_out <- multiway_takemura(X, mode_rep = 3)
multi_out$b
multi_out$B[[1]]
multi_out$B[[2]]
multi_out$B[[3]]
devtools::document()
?multiway_takemura
# Simulate data.
p <- c(5, 5, 5)
X <- array(rnorm(prod(p)), dim = p)
multi_out <- multiway_takemura(X, mode_rep = 3)
multi_out$b
trim(multi_out$B[[1]])
trim(multi_out$B[[2]])
trim(multi_out$B[[3]])
det(multi_out$B[[1]])
devtools::document()
?multiway_takemura
installed.packages()
install()
devtools::install()
library(tensr)
check()
devtools::check()
?kronecker
devtools::document()
devtools::document()
devtools::install()
devtools::check()
install.packages("bibtex")
install.packages("roclet")
library(devtools)
document()
?convert_cov
document()
?lrt_stat
document()
?hooi
document()
?hooi
document()
install
install()
library(tensr)
?tensr
?demean_tensor
?holq
library(tensr)
?anorm_cd
devtools::document()
devtools::install()
library(tensr)
?anorm_cd
?anorm_cd
?anorm_cd
library(tensr)
?anorm_cd
m<-c(6,5,4)
K<-length(m)
M<-rsan(m)
S<-list() ; for(k in 1:K) { S[[k]]<-rwish(diag(m[k]))/m[k] }
Y<-M+atrans(rsan(m),lapply(S,mhalf))
SY<-Y*0
SS<-list() ; for(k in 1:K) { SS[[k]]<-matrix(0,m[k],m[k]) }
s <- 1
saidx<-list()
for(k in 1:K){ saidx[[k]]<-sort(sample(1:m[k],1+rbinom(1,m[k]-1,.5))) }
saidx
MS<-anorm_cd(Y,M,S,saidx)
ms
MS
saidx
MS
dim(Y)
devtools::document()
package?tensr
devtools::install()
library(tensr)
package?tensr
devtools::build()
devtools::build()
packages?tensr
package?tensr
devtools::document()
package?tensr
?tensr
devtools::build()
?tensr
package?tensr
library(tensr)
package?tensr
devtools::install()
package?tensr
?tsum
?tr
library(tensr)
?tsum
?tensr
?holq
library(tensr)
?hol
?holq
?tensr
package?tensr
demean_tensor
demean_tenser
library(tensr)
?demean_tensor
demean_tensor
tensr::demean_tensor
tensr:::demean_tensor
devtools::document()
devtools::install()
?demean_tensor
demean_tensor()
demean_tensor
devtools::build()
devtools::check_cran()
devtools::check_cran(tensr)
devtools::check_cran('tensr')
devtools::check()
?ldan
?anorm_cd
devtools::build()
devtools::document()
devtools::load_all()
?anorm_cd
devtools::load_all()
devtools::document()
devtools::load_all()
?anorm_cd
?tensr
devtools::install()
?tensr
devtools::document()
devtools::install()
?tensr
package?tensr
library(tensr)
?tensr
p <- c(4, 4, 4)
Y <- array(rnorm(prod(p)))
Y
Y <- array(rnorm(prod(p)), dim = p)
Y
Y <- amprod(Z, diag(1:p[1]), 1)
Z <- array(rnorm(prod(p)), dim = p)
Y <- amprod(Z, diag(1:p[1]), 1)
Y
?holq
false_fit <- holq(Y, mode_rep = 1:length(p))
true_fit <- holq(Y, mode_rep = 2:length(p), mode_diag = 1)
names(false_fit)
array_bic_aic(false_fit$sig ^ 2, p, mode_ident = 1:length(p))
array_bic_aic(true_fit$sig ^ 2, p, mode_ident = 2:length(p), mode_diag = 1)
set.seed(857)
p <- c(4, 4, 4)
Z <- array(rnorm(prod(p)), dim = p)
Y <- amprod(Z, diag(1:p[1]), 1)
false_fit1 <- holq(Y, mode_rep = 1:length(p)) ## identity for all modes
false_fit2 <- holq(Y, mode_rep = 2:length(p)) ## unstructured first mode
true_fit <- holq(Y, mode_rep = 2:length(p), mode_diag = 1) ## correct model
array_bic_aic(false_fit1$sig ^ 2, p, mode_ident = 1:length(p))
array_bic_aic(false_fit2$sig ^ 2, p, mode_ident = 2:length(p), mode_unstructurred = 1)
array_bic_aic(false_fit2$sig ^ 2, p, mode_ident = 2:length(p), mode_unstructured = 1)
array_bic_aic(true_fit$sig ^ 2, p, mode_ident = 2:length(p), mode_diag = 1)
set.seed(857)
p <- c(4, 4, 4)
Z <- array(rnorm(prod(p)), dim = p)
Y <- amprod(Z, diag(1:p[1]), 1)
false_fit1 <- holq(Y, mode_rep = 1:length(p)) ## identity for all modes
false_fit2 <- holq(Y, mode_rep = 2:length(p)) ## unstructured first mode
true_fit <- holq(Y, mode_rep = 2:length(p), mode_diag = 1) ## correct model
false_aic1 <- array_bic_aic(false_fit1$sig ^ 2, p, mode_ident = 1:length(p))
false_aic2 <- array_bic_aic(false_fit2$sig ^ 2, p, mode_ident = 2:length(p), mode_unstructured = 1)
true_aic <- array_bic_aic(true_fit$sig ^ 2, p, mode_ident = 2:length(p), mode_diag = 1)
tensr:::rwish
set.seed(857)
p <- c(4, 4, 4)
Z <- array(rnorm(prod(p)), dim = p)
Y <- atrans(Z, list(tensr:::rwish(diag(p[1])), diag(1:p[2]), diag(p[3]))
)
false_fit1 <- holq(Y, mode_rep = 1:3 ## identity for all modes
false_fit2 <- holq(Y, mode_rep = 2:3 ## unstructured first mode
true_fit <- holq(Y, mode_rep = 3, mode_diag = 2) ## correct model
set.seed(857)
p <- c(4, 4, 4)
Z <- array(rnorm(prod(p)), dim = p)
Y <- atrans(Z, list(tensr:::rwish(diag(p[1])), diag(1:p[2]), diag(p[3])))
false_fit1 <- holq(Y, mode_rep = 1:3 ## identity for all modes
false_fit2 <- holq(Y, mode_rep = 2:3) ## unstructured first mode
set.seed(857)
p <- c(4, 4, 4)
Z <- array(rnorm(prod(p)), dim = p)
Y <- atrans(Z, list(tensr:::rwish(diag(p[1])), diag(1:p[2]), diag(p[3])))
false_fit1 <- holq(Y, mode_rep = 1:3) ## identity for all modes
false_fit2 <- holq(Y, mode_rep = 2:3) ## unstructured first mode
true_fit <- holq(Y, mode_rep = 3, mode_diag = 2) ## correct model
false_aic1 <- array_bic_aic(false_fit1$sig ^ 2, p, mode_ident = 1:length(p))
false_aic2 <- array_bic_aic(false_fit2$sig ^ 2, p, mode_ident = 2:length(p), mode_unstructured = 1)
true_aic <- array_bic_aic(true_fit$sig ^ 2, p, mode_ident = 2:length(p), mode_diag = 1)
false_aic1$AIC
c(false_aic1$AIC, false_aic2$AIC, true_aic$AIC)
?plot.default
plot(c(false_aic1$AIC, false_aic2$AIC, true_aic$AIC), type = "l", xaxt = "n")
plot(c(false_aic1$AIC, false_aic2$AIC, true_aic$AIC), type = "l", xaxt = "n", xlab = "Model", ylab = "AIC", main = "AIC")
?axis
axis(side = 1, at = 1:3, labels = c("Wrong Model 1", "Wrong Model 2", "Right Model"))
plot(c(false_aic1$BIC, false_aic2$BIC, true_aic$BIC), type = "l", xaxt = "n", xlab = "Model", ylab = "BIC", main = "BIC")
axis(side = 1, at = 1:3, labels = c("Wrong Model 1", "Wrong Model 2", "Right Model"))
plot(c(false_aic1$AIC, false_aic2$AIC, true_aic$AIC), type = "l", xaxt = "n", xlab = "Model", ylab = "AIC", main = "AIC")
axis(side = 1, at = 1:3, labels = c("Wrong Model 1", "Wrong Model 2", "Right Model"))
plot(c(false_aic1$BIC, false_aic2$BIC, true_aic$BIC), type = "l", xaxt = "n", xlab = "Model", ylab = "BIC", main = "BIC")
axis(side = 1, at = 1:3, labels = c("Wrong Model 1", "Wrong Model 2", "Right Model"))
plot(c(false_aic1$AIC, false_aic2$AIC, true_aic$AIC), type = "l", xaxt = "n", xlab = "Model", ylab = "AIC", main = "AIC")
axis(side = 1, at = 1:3, labels = c("Wrong Model 1", "Wrong Model 2", "Right Model"))
plot(c(false_aic1$BIC, false_aic2$BIC, true_aic$BIC), type = "l", xaxt = "n", xlab = "Model", ylab = "BIC", main = "BIC")
axis(side = 1, at = 1:3, labels = c("Wrong Model 1", "Wrong Model 2", "Right Model"))
devtools::document()
devtools::install()
?tensr
?tensr
library(tensr)
?tensr
devtools::document()
devtools::install()
devtools::build()
lintr::lint_package()
devtools::document()
devtools::build_vignettes()
devtools::build()
lintr::lint_package()
devtools::document()
devtools::install()
devtools::build()
?tensr
devtools::document()
devtools::load_all()
?array_aic_bic
?tensr::array_aic_bic
?tensr::array_bic_aic
?tensr:::array_bic_aic
library(tensr)
?array_bic_aic
devtools::document()
devtools::build()
devtools::check()
devtools::document()
devtools::build()
library(tensor)
library(tensr)
?holq
devtools::document()
devtools::install()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::install()
devtools::build()
devtools::document()
devtools::inst()
devtools::install()
devtools::build()
devtools::install()
devtools::check()
install.packages('rmarkdown')
library(tensr)
?tensr
?tensr
??tensr
library(tensr)
install.packages("rTensor")
library(rTensor)
library(help = 'rTensor')
rand_tensor
cp
fnorm
faces_tnsr
holq(faces_tensr)
data(faces_tnsr)
faces_tnsr
holq
holq(faces_tensr)
class(faces_tensr)
faces_tensr
holq(faces_tnsr)
as.array(tnsr)
as.array(faces_tnsr)
attributes(faces_tnsr)
names(faces_tnsr)
?faces_tnsr
faces_tnsr[[1]]
faces_tnsr[[2]]
faces_tnsr
faces_tnsr$Data
faces_tnsr
attributes(faces_tnsr)[[1]]
attributes(faces_tnsr)[[2]]
attributes(faces_tnsr)[[=3]]
attributes(faces_tnsr)[[3]]
class(attributes(faces_tnsr)[[3]])
holq(attributes(faces_tnsr)[[3]])
face_holq <- holq(attributes(faces_tnsr)[[3]])
names(face_holq)
face_holq$A
mle <- tensr::mle_from_holq(face_holq)
mle
image(mle[[1]])
image(mle[[1]][[1]]
)
image(mle[[1]][[1]])
image(mle[[1]][[2]])
image(mle[[1]][[3]])
image(mle[[1]][[4]])
image(mle[[1]][[1]])
image(mle[[1]][[2]])
image(mle[[1]][[3]])
image(mle[[1]][[4]])
library(tensr)
?ihop
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::install()
devtools::build()
devtools:: check(cran = TRUE)
devtools::build()
devtools::build()
devtools::use_package("stats")
?rnorm
?rgamma
?qnorm
?rt
m <- c(6, 5, 4)
K <- length(m)
M <- tensr:::rsan(m)
S <- list(); for(k in 1:K) { S[[k]] <- tensr:::rwish(diag(m[k])) / m[k] }
Y <- M + atrans(tensr:::rsan(m), lapply(S, mhalf))
SY <- Y * 0
library(tensr)
m <- c(6, 5, 4)
K <- length(m)
M <- tensr:::rsan(m)
S <- list(); for(k in 1:K) { S[[k]] <- tensr:::rwish(diag(m[k])) / m[k] }
Y <- M + atrans(tensr:::rsan(m), lapply(S, mhalf))
SY <- Y * 0
SS <- list() ; for(k in 1:K) { SS[[k]] <- matrix(0, m[k], m[k]) }
for(s in 1:100)
{
saidx <- list()
for(k in 1:K) { saidx[[k]] <- sort(sample(1:m[k], 1 + rbinom(1, m[k] - 1, 0.5))) }
MS <- anorm_cd(Y, M, S, saidx)
Ya <- MS$Mab + atrans(tensr:::rsan(sapply(saidx, length)), lapply(MS$Sab, mhalf))
Y[arrIndices(saidx)] <- Ya
SY <- SY + Y
for(k in 1:K){SS[[k]] <- SS[[k]] + mat(Y - M, k) %*% t(mat(Y - M, k)) }
}
par(mfrow = c(2, 2))
plot(M, SY / s)  ; abline(0, 1)
for (k in 1:K) { plot(S[[k]] / tr(S[[k]]), SS[[k]] / tr(SS[[k]])) ; abline(0, 1) }
devtools::document()
devtools::install()
devtools::build()
devtools::check()
devtools::build()
devtools::check()
devtools::use_readme_rmd()
* Functions for calculating (Tucker) tensor decompositions, such as the incredible higher-order LQ decomposition (incredible HOLQ), the incredible singular value decomposition (ISVD), the incredible higher-order polar decomposition (IHOP), the higher-order singular value decomposition (HOSVD), and the low multilinear rank approximation using the higher-order orthogonal iteration (HOOI).
* Perform likelihood inference in mean-zero Kronecker structured covariance models, such as
+ Derive the maximum likelihood estimates of the covariance matrices under the array normal model,
devtools::document()
devtools::install()
devtools::check()
devtools::install()
devtools::chec()
devtools::test()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
